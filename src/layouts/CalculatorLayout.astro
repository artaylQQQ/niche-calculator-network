---
import BaseLayout from './BaseLayout.astro';

/**
 * CalculatorLayout wraps individual calculator pages and injects structured
 * data into the page.  It accepts the same `title`, `description` and
 * `canonical` props as BaseLayout as well as a `schema` prop exported from
 * each MDX calculator.  At render time it derives a JSON‑LD object
 * describing the calculator as both a SoftwareApplication and a FAQPage when
 * FAQs are available.  The JSON‑LD is appended to the end of the document
 * body which search engines will still parse correctly.
 */
const { title, description, canonical, schema } = Astro.props;
const site = Astro.site?.toString() || (import.meta.env.SITE_URL ?? 'https://example.com');
const url  = new URL(Astro.url.pathname, site).toString();

// Transform the MDX schema into Schema.org FAQ objects.  If the schema
// contains a list of FAQs the `mainEntity` array will contain one entry
// per question.  Otherwise this will be omitted.
const faqs = Array.isArray(schema?.faqs)
  ? schema.faqs.map((q) => ({
      '@type': 'Question',
      name: q.question,
      acceptedAnswer: { '@type': 'Answer', text: q.answer }
    }))
  : [];

const graph = [];
// A general description of the calculator as a software application.
graph.push({
  '@type': 'SoftwareApplication',
  name: schema?.title ?? title ?? 'Calculator',
  operatingSystem: 'Any',
  applicationCategory: 'Calculator',
  url,
  description: schema?.intro ?? description ?? '',
  offers: {
    '@type': 'Offer',
    price: '0',
    priceCurrency: 'USD'
  }
});
// When FAQs exist include a FAQPage description.
if (faqs.length > 0) {
  graph.push({ '@type': 'FAQPage', mainEntity: faqs });
}

const jsonLd = {
  '@context': 'https://schema.org',
  '@graph': graph
};

---
<BaseLayout {title} {description} {canonical}>
  <slot />

  {Array.isArray(schema?.faqs) && schema.faqs.length > 0 && (
    <section class="faq">
      <h2>FAQ</h2>
      {schema.faqs.map((f) => (
        <details>
          <summary>{f.question}</summary>
          <p>{f.answer}</p>
        </details>
      ))}
    </section>
  )}

  {/**
    * The structured data block is appended to the end of the page body.  We
    * mark the script as inline to avoid generating an external file.  The
    * JSON.stringify call runs at build time so it will output a static
    * literal.
    */}
  <script type="application/ld+json" is:inline>{JSON.stringify(jsonLd)}</script>

  <style is:inline>
    .faq { margin-top: 24px; }
    .faq details { margin: 8px 0; }
    .faq summary { cursor: pointer; font-weight: 600; }
    .faq p { margin: 4px 0 0 16px; }
  </style>
</BaseLayout>