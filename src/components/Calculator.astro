---
import { evalExpression } from '../lib/safeEval';
const { schema } = Astro.props;

const whitelist = (schema?.inputs || []).map((i: any) => i.name);
const nf = new Intl.NumberFormat(schema?.locale || 'en-US', { maximumFractionDigits: 6 });
const hasAds = Boolean(import.meta.env.VITE_ADSENSE_CLIENT);
---

<form id="calc" class="space-y-3" on:submit|preventDefault={() => {}}>
  {schema?.inputs?.map((inp: any) => (
    <div class="flex flex-col gap-1">
      <label for={inp.name} class="font-medium">{inp.hint || inp.name}</label>
      <input
        id={inp.name}
        name={inp.name}
        type="number"
        inputmode="decimal"
        step={inp.step ?? 'any'}
        min={inp.min ?? undefined}
        max={inp.max ?? undefined}
        class="border rounded px-3 py-2"
        aria-describedby={`help-${inp.name}`}
        aria-invalid="false"
      />
      <small id={`help-${inp.name}`} class="text-xs opacity-70">
        {schema?.units?.input ? `Unit: ${schema.units.input}` : ''}
      </small>
      <div id={`err-${inp.name}`} class="text-xs text-red-600" aria-live="polite"></div>
    </div>
  ))}

  <button class="px-4 py-2 rounded bg-black text-white">Calculate</button>
</form>

<div id="result" class="mt-4" role="status" aria-live="polite"></div>

{hasAds && (
  <ins class="adsbygoogle"
    style="display:block;min-height:280px"
    data-ad-client={import.meta.env.VITE_ADSENSE_CLIENT}
    data-ad-slot={import.meta.env.VITE_ADSENSE_SLOTHEADER || ''}
    data-ad-format="auto"
    data-full-width-responsive="true">
  </ins>
)}

{schema?.examples?.length > 0 && (
  <details class="mt-6">
    <summary class="cursor-pointer font-semibold">Examples</summary>
    <ul class="list-disc ml-6 mt-2">
      {schema.examples.map((ex: any) => (
        <li>
          <code>{JSON.stringify(ex.input)}</code> â†’ <strong>{ex.output}</strong>
        </li>
      ))}
    </ul>
  </details>
)}

<script is:raw>
(function(){
  const form = document.getElementById('calc');
  const result = document.getElementById('result');
  const inputs = Array.from(form.querySelectorAll('input'));
  const schema = ${json.dumps({})};

  window.safeEvalExpression = function(expr, vars, whitelist){
    const OPS = {'+':{p:1,r:false,fn:(a,b)=>a+b},'-':{p:1,r:false,fn:(a,b)=>a-b},'*':{p:2,r:false,fn:(a,b)=>a*b},'/':{p:2,r:false,fn:(a,b)=>a/b},'^':{p:3,r:true,fn:(a,b)=>Math.pow(a,b)}};
    const tokens=[]; const re=/([A-Za-z_][A-Za-z0-9_]*)|(\d+(?:\.\d+)?)|([+\-*/^()])/g; let m;
    while((m=re.exec(expr))) tokens.push(m[0]);
    const toRPN=[]; const stack=[];
    for(const t of tokens){
      if(/^\d/.test(t)) toRPN.push(t);
      else if(/^[A-Za-z_]/.test(t)){ if(!whitelist.includes(t)) throw new Error('Unknown var'); toRPN.push('#'+t); }
      else if(OPS[t]){ while(stack.length){ const o2=stack[stack.length-1]; if(!OPS[o2]) break; const o1=OPS[t],oB=OPS[o2]; if((o1.r&&o1.p<oB.p)||(!o1.r&&o1.p<=oB.p)) toRPN.push(stack.pop()); else break;} stack.push(t); }
      else if(t==='(') stack.push(t);
      else if(t===')'){ while(stack.length&&stack[stack.length-1]!=='(') toRPN.push(stack.pop()); if(!stack.length) throw new Error('paren'); stack.pop(); }
    }
    while(stack.length){ const s=stack.pop(); if(s==='(') throw new Error('paren'); toRPN.push(s); }
    const st=[]; for(const t of toRPN){
      if(OPS[t]){ const b=st.pop(), a=st.pop(); if(a===undefined||b===undefined) throw new Error('malformed'); st.push(OPS[t].fn(a,b)); }
      else if(t[0]==='#'){ const k=t.slice(1); const v=vars[k]; if(typeof v!=='number'||isNaN(v)) throw new Error('invalid'); st.push(v); }
      else st.push(parseFloat(t));
    }
    if(st.length!==1) throw new Error('malformed'); return st[0];
  };

  function readVars(){
    const vars = {};
    for (const el of inputs) {
      const v = el.value.trim();
      const num = v === '' ? NaN : Number(v);
      vars[el.name] = num;
    }
    return vars;
  }

  function setError(name, msg){
    const el = document.getElementById('err-'+name);
    const input = document.getElementById(name);
    if (msg) {
      el.textContent = msg;
      input.setAttribute('aria-invalid','true');
      input.setAttribute('aria-describedby', 'help-'+name+' err-'+name);
    } else {
      el.textContent = '';
      input.setAttribute('aria-invalid','false');
      input.setAttribute('aria-describedby', 'help-'+name);
    }
  }

  function validate(vars, keys){
    let ok = true;
    for (const k of keys){
      const val = vars[k];
      if (typeof val !== 'number' || isNaN(val)) {
        setError(k, 'Please enter a valid number.');
        ok = false;
      } else {
        setError(k, '');
      }
    }
    return ok;
  }

  function fmt(n){ try { return new Intl.NumberFormat(schema.locale || 'en-US', { maximumFractionDigits: 6 }).format(n); } catch { return String(n); } }

  form.addEventListener('submit', (e) => {
    const keys = (schema.inputs || []).map(i => i.name);
    const vars = readVars();
    if (!validate(vars, keys)) { result.textContent=''; return; }

    try {
      let out;
      if (schema.expression) {
        out = window.safeEvalExpression(schema.expression, vars, keys);
      } else {
        result.textContent = 'This calculator requires an expression.';
        return;
      }
      result.textContent = `Result: ${fmt(out)} ${schema?.units?.output || ''}`;
    } catch (err) {
      result.textContent = 'Invalid inputs or expression.';
    }

    try {
      if (window.adsbygoogle && !document.body.dataset.adsInit) {
        (adsbygoogle = window.adsbygoogle || []).push({});
        document.body.dataset.adsInit = '1';
      }
    } catch {}
  });
})();
</script>
