---
/**
 * src/components/Calculator.astro — V036
 * Accessible, responsive calculator component.
 * - Renders inputs from schema.inputs[]
 * - Evaluates schema.expression using expr-eval (safe math parser)
 * - Shows examples, FAQs, and injects JSON-LD (Calculator + FAQPage)
 */
const { schema } = Astro.props;
const title = schema?.title ?? 'Calculator';
const slug = schema?.slug ?? 'calculator';
const inputs = Array.isArray(schema?.inputs) ? schema.inputs : [];
const intro = schema?.intro ?? '';
const expression = schema?.expression ?? schema?.formula ?? '';
const examples = Array.isArray(schema?.examples) ? schema.examples : [];
const faqs = Array.isArray(schema?.faqs) ? schema.faqs : [];
const unit = schema?.unit ?? '';
const metaDescription = schema?.metaDescription ?? (schema?.description ?? '');
---
<section class="calc container mx-auto max-w-3xl px-4 py-6" data-calculator data-slug={slug} aria-labelledby={`h-${slug}`}>
  <h1 id={`h-${slug}`} class="text-3xl font-bold text-slate-900">{title}</h1>
  {intro && <p class="mt-2 text-slate-600">{intro}</p>}

  <form class="mt-6 grid gap-4" on:submit|preventDefault={() => {}}>
    {inputs.map((inp) => (
      <div class="grid gap-1">
        <label for={`i-${slug}-${inp.name}`} class="font-medium text-slate-800">{inp.label}{inp.unit ? ` (${inp.unit})` : ''}</label>
        <input id={`i-${slug}-${inp.name}`} name={inp.name} type={inp.type || 'number'} inputmode="decimal"
               required={inp.required ?? true}
               step={inp.step ?? 'any'} min={inp.min} max={inp.max}
               class="rounded-lg border border-slate-300 px-3 py-2 outline-none focus:ring-2 focus:ring-blue-500"
               aria-describedby={inp.help ? `h-${slug}-${inp.name}` : undefined} />
        {inp.help && <div id={`h-${slug}-${inp.name}`} class="text-sm text-slate-500">{inp.help}</div>}
      </div>
    ))}
    <button id={`btn-${slug}`} type="button"
            class="rounded-xl bg-blue-600 text-white px-4 py-2 font-semibold hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 w-fit">Calculate</button>
  </form>

  <output id={`out-${slug}`} class="mt-4 block rounded-xl bg-slate-50 border border-slate-200 p-4 text-lg text-slate-900" aria-live="polite"></output>

  {examples.length > 0 && (
    <section class="mt-8">
      <h2 class="text-xl font-semibold">Examples</h2>
      <ul class="list-disc pl-6 text-slate-700">
        {examples.map((e) => <li>{e}</li>)}
      </ul>
    </section>
  )}

  {faqs.length > 0 && (
    <section class="mt-8">
      <h2 class="text-xl font-semibold">FAQ</h2>
      <dl class="mt-2 grid gap-3">
        {faqs.map((qa) => (
          <div class="rounded-lg border border-slate-200 p-3">
            <dt class="font-medium">{qa.question}</dt>
            <dd class="text-slate-700">{qa.answer}</dd>
          </div>
        ))}
      </dl>
    </section>
  )}
</section>

<!-- JSON-LD -->
<script type="application/ld+json">
{JSON.stringify({
  "@context": "https://schema.org",
  "@type": "SoftwareApplication",
  "name": title,
  "applicationCategory": "Calculator",
  "description": metaDescription || intro || title,
})}
</script>
{faqs.length ? <script type="application/ld+json">
{JSON.stringify({
  "@context": "https://schema.org",
  "@type": "FAQPage",
  "mainEntity": faqs.map((q) => ({
    "@type": "Question",
    "name": q.question,
    "acceptedAnswer": { "@type": "Answer", "text": q.answer }
  }))
})}
</script> : null}

<script>
// Minimal evaluator using expr-eval, loaded lazily
(async () => {
  function num(v){ const n = typeof v === 'string' ? parseFloat(v) : Number(v); return isFinite(n) ? n : 0; }
  const slug = {slug}.toString();
  const exprText = {JSON.stringify(expression)};
  const inputs = {JSON.stringify(inputs)};

  const Parser = (await import('https://cdn.jsdelivr.net/npm/expr-eval@2.0.2/dist/bundle.min.js')).Parser;
  const out = document.querySelector('#out-' + slug);
  const btn = document.querySelector('#btn-' + slug);

  function compute(){
    try{
      const vars = Object.fromEntries(inputs.map(it => [it.name, num(document.getElementById(`i-${slug}-${it.name}`).value)]));
      const parser = new Parser();
      const expr = parser.parse(exprText);
      const result = expr.evaluate(vars);
      out.textContent = Number.isFinite(result) ? String(result) : '—';
    }catch(e){
      out.textContent = 'Check your inputs.';
      console.error(e);
    }
  }

  btn?.addEventListener('click', compute);
})();
</script>
