---
const { schema } = Astro.props;
const title = schema?.title ?? 'Calculator';
const slug = schema?.slug ?? 'calculator';
const inputs = Array.isArray(schema?.inputs) ? schema.inputs : [];
const intro = schema?.intro ?? '';
const expression = schema?.expression ?? '';
function isFinance(){
  const c = (schema?.cluster || '').toLowerCase();
  return c.includes('finance');
}
---

<section class="mx-auto max-w-2xl">
  <h1 class="text-2xl font-semibold text-slate-900">{title}</h1>
  {intro && <p class="mt-2 text-slate-600">{intro}</p>}

  <form class="mt-6 space-y-4" id={`form-${slug}`}>
    {inputs.map((i) => (
      <div class="space-y-1">
        <label for={`in-${slug}-${i.name}`} class="block text-sm font-medium text-slate-800">{i.label ?? i.name}</label>
        <input
          id={`in-${slug}-${i.name}`}
          name={i.name}
          type={i.type ?? 'number'}
          inputmode="decimal"
          step={i.step ?? 'any'}
          min={i.min}
          max={i.max}
          placeholder={i.placeholder ?? 'Enter value'}
          class="block w-full rounded-md border border-slate-300 px-3 py-2 outline-none focus:ring-2 focus:ring-blue-500"
        />
        {(i.units || (isFinance() && ['price','cost','costs','revenue','principal','investment','fixed','variable'].includes(i.name))) && (
          <p class="text-xs text-slate-500">Units: {i.units || '$'}</p>
        )}
        {i.hint && <p class="text-xs text-slate-500">{i.hint}</p>}
      </div>
    ))}
    <button type="button" id={`btn-${slug}`} class="rounded-md bg-blue-600 px-4 py-2 text-white hover:bg-blue-700">Calculate</button>
  </form>

  <div id={`result-${slug}`} class="mt-4 rounded-md bg-slate-50 p-3 text-slate-800"></div>
</section>

<script>
function formatNumber(n){
  try { return new Intl.NumberFormat('en-US', { maximumFractionDigits: 3 }).format(n); }
  catch(e){ return String(n); }
}
function evalSafe(expr, vars, allowedNames){
  const allowed=/^[0-9+\-*/%^().,?:<>=!&|a-zA-Z_\s]+$/;
  if(!allowed.test(expr)) throw new Error('Invalid expression');
  let e = expr.replace(/\^/g,'**');
  e = e.replace(/\b([A-Za-z_][A-Za-z0-9_]*)\b/g,(m,name)=>{
    if(['Math','NaN','Infinity','true','false'].includes(name)) return name;
    if(allowedNames.has(name)) return 'vars.'+name;
    throw new Error('Unknown symbol: ' + name);
  });
  const fn = new Function('vars', `with (Math) { return (${e}); }`);
  const v = fn(vars);
  if(typeof v!=='number' || !isFinite(v)) throw new Error('Result is not a finite number');
  return v;
}
function handleCalc(slug, expression, inputs){
  const resEl = document.getElementById('result-'+slug);
  const vars = {};
  for(const i of inputs){
    const el = document.getElementById('in-'+slug+'-'+i.name);
    if(!el){ resEl.textContent = 'Internal error: missing input '+i.name; return; }
    const raw = el.value.trim();
    if(raw === ''){ resEl.textContent = 'Please fill out all fields.'; return; }
    const num = Number(raw);
    if(!isFinite(num)){ resEl.textContent = 'Please enter valid numbers.'; return; }
    vars[i.name] = num;
  }
  try{
    const allowed = new Set(inputs.map(i=>i.name));
    const value = evalSafe(expression, vars, allowed);
    resEl.textContent = 'Result: ' + formatNumber(value);
  }catch(err){
    resEl.textContent = err.message || String(err);
  }
}
document.addEventListener('DOMContentLoaded',()=>{
  const slug = {slug};
  const expression = {expression};
  const inputs = {inputs};
  const btn = document.getElementById('btn-'+slug);
  if(btn){ btn.addEventListener('click', ()=>handleCalc(slug, expression, inputs)); }
});
</script>
