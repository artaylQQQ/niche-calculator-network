---
const { schema } = Astro.props;
const title = schema?.title ?? 'Calculator';
const slug = schema?.slug ?? 'calculator';
const inputs = Array.isArray(schema?.inputs) ? schema.inputs : [];
const intro = schema?.intro ?? '';
const expression = schema?.expression ?? schema?.formula ?? '';
---
<section class="calc" data-calculator data-slug={slug} data-exp={expression} aria-labelledby={`h-${slug}`}>
  <h1 id={`h-${slug}`}>{title}</h1>
  {intro && <p class="muted">{intro}</p>}

  <form data-role="form" onsubmit="compute(); return false;">
    {inputs.map((i) => (
      <div class="field">
        <label for={`in-${slug}-${i.name}`}>{i.label ?? i.name}</label>
        <input
          id={`in-${slug}-${i.name}`}
          name={i.name}
          type={i.type ?? 'number'}
          min={i.min ?? undefined}
          max={i.max ?? undefined}
          step={i.step ?? 'any'}
          placeholder={i.placeholder ?? ''}
          required={i.required ?? false}
        />
      </div>
    ))}
    <button type="submit">Calculate</button>
    <output id={`out-${slug}`} aria-live="polite"></output>
  </form>

  <script type="application/json" data-schema>{JSON.stringify(schema)}</script>
</section>

<style>
  .calc { max-width: 720px; margin: 0 auto; padding: 8px; color: var(--ink); }
  h1 { margin: 0 0 8px; font-size: 28px; }
  .muted { color: var(--muted); margin: 0 0 16px; }
  .field { margin: 14px 0; display: flex; flex-direction: column; }
  label { font-weight: 500; margin-bottom: 4px; }
  input { padding: 6px 8px; font-size: 16px; border: 1px solid #ccc; border-radius: 4px; }
  button[type="submit"] { margin: 12px 0; padding: 8px 16px; font-size: 15px;
                          background: var(--primary); color: var(--primary-ink);
                          border: none; border-radius: 4px; cursor: pointer; }
  output { display: block; margin-top: 8px; font-weight: bold; }
</style>

<script is:inline>
  function compute() {
    const container = document.currentScript.closest('[data-calculator]');
    const expr = container?.dataset.exp;
    if (!expr) return false;
    try {
      const form = container.querySelector('form[data-role="form"]');
      const formData = new FormData(form);
      let resultExpr = expr;
      for (const [name, value] of formData.entries()) {
        resultExpr = resultExpr.replace(new RegExp(`\b${name}\b`, 'g'), parseFloat(String(value)));
      }
      const result = Function(\"use strict\", \"return (\n\" + resultExpr + \"\n)")();
      container.querySelector('output').textContent = isNaN(result) ? 'â€“' : String(result);
    } catch (err) {
      console.error('Calculation error:', err);
      container.querySelector('output').textContent = 'Error';
    }
    return false;
  }
</script>