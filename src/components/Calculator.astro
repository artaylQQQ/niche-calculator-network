---
/** Calculator.astro — V017.7.gemini
  - Simplificado: usa atributos data-* para pasar slug y expression.
  - Sin JSON.parse necesario (aunque se mantiene opcional).
**/
const { schema } = Astro.props;
const title = schema?.title ?? 'Calculator';
const slug = schema?.slug ?? 'calculator';
const inputs = Array.isArray(schema?.inputs) ? schema.inputs : [];
const intro = schema?.intro ?? '';
const expression = schema?.expression ?? schema?.formula ?? schema?.formula_expression ?? '';
---

<section class="calc" data-calculator data-slug={slug} data-exp={expression} aria-labelledby={`h-${slug}`}>
  <h1 id={`h-${slug}`}>{title}</h1>
  {intro && <p class="muted">{intro}</p>}

  <form data-role="form" onsubmit="compute(); return false">
    {inputs.map((i) => (
      <div class="field">
        <label for={`in-${slug}-${i.name}`}>{i.hint ?? i.name}</label>
        <input
          id={`in-${slug}-${i.name}`}
          name={i.name}
          type="number"
          step={i.step ?? 'any'}
          {...(i.min !== undefined ? { min: i.min } : {})}
          {...(i.max !== undefined ? { max: i.max } : {})}
          inputmode="decimal"
          aria-describedby={`hint-${slug}-${i.name}`}
        />
        <div id={`hint-${slug}-${i.name}`} class="hint">{i.units ? i.units : ''}</div>
      </div>
    ))}
    <button type="button" data-action="calc" class="btn">Calculate</button>
  </form>

  <div class="result" data-role="result" aria-live="polite"></div>

  <script type="application/json" data-schema>{JSON.stringify(schema)}</script>
</section>


<style>
  .calc { max-width: 720px; margin: 0 auto; padding: 8px; }
  h1 { margin: 0 0 8px; font-size: 28px; }
  .muted { color: var(--muted); margin: 0 0 16px; }
  .field { margin: 14px 0; }
  .field label { display:block; margin: 0 0 6px; font-weight: 600; }
  .field input[type=number], .field input, .field select { width: 100%; padding: 10px 12px; border: 1px solid var(--border); border-radius: 12px; background:#fff; }
  .btn { display:inline-block; padding:12px 16px; border-radius:12px; border:0; background:var(--primary); color:#fff; font-weight:600; cursor:pointer; }
  .btn:hover{ filter:brightness(1.05); }
  .result { margin-top: 16px; font-size: 18px; font-weight: 600; }
</style>


<script is:inline>
(function () {
  // Parser seguro (shunting-yard)
  function evalExpr(expr, vars){
    let out=[], ops=[], prec={'^':4,'*':3,'/':3,'%':3,'+':2,'-':2}, right={'^':true}, i=0;
    function isSpace(c){return /\s/.test(c);} function isDigit(c){return c>='0'&&c<='9';} function isLetter(c){return /[A-Za-z_]/.test(c);}
    let tokens=[];
    while(i<expr.length){
      let c=expr[i];
      if(isSpace(c)){i++;continue;}
      if(isDigit(c)||c==='.'){let s=i; while(i<expr.length && /[0-9.eE+\-]/.test(expr[i])) i++; tokens.push({t:'num',v:parseFloat(expr.slice(s,i))}); continue;}
      if(isLetter(c)){let s2=i; while(i<expr.length && /[A-Za-z0-9_]/.test(expr[i])) i++; let name=expr.slice(s2,i); if(!(name in vars)) throw new Error('Unknown let '+name); tokens.push({t:'num',v:Number(vars[name])}); continue;}
      if('+-*/%^()'.indexOf(c)!==-1){tokens.push({t:'op',v:c}); i++; continue;}
      throw new Error('Bad char in expression');
    }
    for(let ti=0; ti<tokens.length; ti++){
      let tok=tokens[ti];
      if(tok.t==='num'){out.push(tok); continue;}
      let op=tok.v;
      if(op==='('){ops.push(op); continue;}
      if(op===')'){while(ops.length && ops[ops.length-1]!=='(') out.push({t:'op',v:ops.pop()}); ops.pop(); continue;}
      while(ops.length){
        let top=ops[ops.length-1]; if(top==='(') break;
        if((right[op] && prec[op] < prec[top]) || (!right[op] && prec[op] <= prec[top])) out.push({t:'op',v:ops.pop()}); else break;
      }
      ops.push(op);
    }
    while(ops.length) out.push({t:'op',v:ops.pop()});
    let st=[];
    for(let oi=0; oi<out.length; oi++){
      let t=out[oi]; if(t.t==='num'){st.push(t.v); continue;}
      let b=st.pop(), a=st.pop(), r;
      switch(t.v){
        case '+': r=a+b; break;
        case '-': r=a-b; break;
        case '*': r=a*b; break;
        case '/': r=b===0?NaN:a/b; break;
        case '%': r=b===0?NaN:a%b; break;
        case '^': r=Math.pow(a,b); break;
        default: throw new Error('op');
      }
      st.push(r);
    }
    return st.pop();
  }

  function fmt(n){
    return isFinite(n)
      ? new Intl.NumberFormat('en-US', { maximumFractionDigits: 3 }).format(n)
      : '—';
  }
  function num(v){ let n=Number(v); return isFinite(n)?n:NaN; }

  function initCalc(root){
    if (!root || root.__calcInit) return;
    root.__calcInit = true;
    let form = root.querySelector('[data-role="form"]');
    let resultEl = root.querySelector('[data-role="result"]');
    let btn = root.querySelector('[data-action="calc"]');
    if (!form || !resultEl || !btn) return;
    let slug = root.getAttribute('data-slug') || 'calculator';
    let expr = root.getAttribute('data-exp') || '';
    
    function readInputs(){
      let out={};
      let fields = form.querySelectorAll('input[name]');
      fields.forEach(function(el){
        let v = el.value;
        out[el.name] = (v!=='' ? Number(v) : NaN);
      });
      return out;
    }

    window.compute = function(){
      let vars = readInputs();
      for(let k in vars){ if(!isFinite(vars[k])){ resultEl.textContent='Please fill all fields.'; return; } }

      let value, usedExpr=false;
      if (expr){
        try { value = evalExpr(expr, vars); usedExpr=true; }
        catch(e){ usedExpr=false; }
      }

      if (!usedExpr){
        switch(slug){
          case 'loan-payment-calculator': {
            let P=num(vars.principal), r=num(vars.rate)/100/12, n=num(vars.months);
            value = r===0 ? P/n : (P*r)/(1-Math.pow(1+r,-n)); break;
          }
          case 'percentage-discount-calculator':
            value = num(vars.price)*(1-num(vars.discount)/100);
            break;
          case 'percentage-increase-calculator':

          case 'break-even-calculator': {
            const fixed = num(vars.fixed), variable = num(vars.variable), price = num(vars.price);
            if(!isFinite(fixed) || !isFinite(variable) || !isFinite(price)){
              resultEl.textContent = 'Please fill all fields.'; return;
            }
            if(price <= variable){
              resultEl.textContent = 'Price must be greater than variable cost.'; return;
            }
            value = fixed / (price - variable); break;
          }
            value = num(vars.original)*(1+num(vars.increase)/100); break;
          case 'bmi-calculator': {
            let h = num(vars.height);
            value = num(vars.weight)/(h*h); break;
          }
          case 'compound-interest-calculator': {
            let P2=num(vars.principal), r2=num(vars.rate)/100, t=num(vars.years), n2=num(vars.times);
            value = P2*Math.pow(1+r2/n2, n2*t); break;
          }
          case 'triangle-area-calculator':
            value = (num(vars.base)*num(vars.height))/2;
            break;
          case 'roi-calculator':
            value = ((num(vars.gain)-num(vars.cost))/num(vars.cost))*100; break;
          case 'sales-tax-calculator':
            value = num(vars.price)*(1+num(vars.tax)/100); break;
          default:
            resultEl.textContent = 'Calculation not available.'; return;
        }
      }

      /* UNIT_RESOLUTION */
      let unit = root.getAttribute('data-unit')||'';
      if(!unit){
        // Default currency for finance-like calculators by slug hint
        const slug = root.getAttribute('data-slug')||'';
        const isMoney = /loan|mortgage|payment|interest|profit|tax|salary|revenue|cost|price|roi|net/i.test(slug);
        if(isMoney){ unit = '$'; }
      }
      if(unit==='$' || unit==='€' || unit==='£'){
        resultEl.textContent = 'Result: ' + unit + fmt(value);
      } else {
        if(unit==='$' || unit==='€' || unit==='£'){
        resultEl.textContent = 'Result: ' + unit + fmt(value);
      } else {
        resultEl.textContent = 'Result: ' + fmt(value) + (unit ? (' ' + unit) : '');
      }
      }
    }

    btn.addEventListener('click', compute);
  }

  function boot(){
    let nodes = document.querySelectorAll('[data-calculator]');
    if (!nodes || !nodes.length) return;
    nodes.forEach(initCalc);
  }

  if (document.readyState !== 'loading') boot();
  else document.addEventListener('DOMContentLoaded', boot);
})();
</script>