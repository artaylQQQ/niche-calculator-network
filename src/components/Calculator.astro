import React, { useState } from 'react';
import '../styles/Calculator.css';

// Componente principal de la calculadora
function Calculator() {
  // Estado para manejar la lista de pares de keyword/búsqueda.
  // Se inicializa con una fila vacía para empezar.
  const [fields, setFields] = useState([{ keyword: '', searches: '' }]);
  
  // Estado para almacenar el resultado del cálculo.
  const [result, setResult] = useState(null);
  // Estado para manejar los mensajes de error.
  const [error, setError] = useState('');

  /**
   * Maneja los cambios en los campos de entrada (keyword o searches).
   * @param {number} index - El índice de la fila que está cambiando.
   * @param {Event} event - El evento del cambio de entrada.
   */
  const handleFieldChange = (index, event) => {
    // Resetea el resultado y el error cuando el usuario modifica los datos.
    setResult(null);
    setError('');

    // Crea una copia de la lista de campos actual.
    const newFields = [...fields];
    const { name, value } = event.target;

    // Para el campo 'searches', solo permite números.
    if (name === 'searches') {
      // Usamos una expresión regular para eliminar cualquier caracter que no sea un número.
      newFields[index][name] = value.replace(/[^0-9]/g, '');
    } else {
      newFields[index][name] = value;
    }

    // Actualiza el estado con la nueva lista de campos.
    setFields(newFields);
  };

  /**
   * Agrega una nueva fila de campos vacíos a la lista.
   */
  const handleAddField = () => {
    // Resetea el resultado y el error para permitir un nuevo cálculo.
    setResult(null);
    setError('');
    // Agrega un nuevo objeto al array 'fields'.
    setFields([...fields, { keyword: '', searches: '' }]);
  };

  /**
   * Elimina una fila de campos de la lista según su índice.
   * @param {number} index - El índice de la fila a eliminar.
   */
  const handleRemoveField = (index) => {
    // Resetea el resultado y el error.
    setResult(null);
    setError('');

    // Crea una copia de la lista.
    const newFields = [...fields];
    // Elimina el elemento en el índice especificado.
    newFields.splice(index, 1);
    // Actualiza el estado.
    setFields(newFields);
  };

  /**
   * Realiza el cálculo del "Niche Score".
   */
  const handleCalculate = () => {
    // Resetea cualquier error previo.
    setError('');

    // Filtra las filas para procesar solo aquellas que están completas.
    const validFields = fields.filter(
      (field) => field.keyword.trim() !== '' && field.searches.trim() !== ''
    );
    
    // Si no hay filas válidas, muestra un error.
    if (validFields.length === 0) {
      setError('Please fill in at least one keyword and its search volume.');
      setResult(null);
      return;
    }

    // Procesa los datos para el cálculo.
    const keywords = validFields.map((field) => field.keyword);
    const searches = validFields.map((field) => parseInt(field.searches, 10));

    // Suma el total de búsquedas mensuales.
    const totalSearches = searches.reduce((acc, current) => acc + current, 0);

    // Lógica de cálculo del Niche Score (mantenemos la fórmula original).
    const score = Math.min(100, Math.round(Math.log(totalSearches) * 10 + keywords.length));

    // Almacena los resultados en el estado para mostrarlos.
    setResult({
      score: score,
      totalSearches: totalSearches,
    });
  };

  return (
    <div className="calculator-container">
      <h2>Niche Volume Calculator</h2>
      <p className="description">
        Enter your keywords and their average monthly search volume to calculate the niche potential.
      </p>

      {/* Contenedor del formulario dinámico */}
      <div className="dynamic-form">
        {fields.map((field, index) => (
          <div key={index} className="form-row">
            <input
              type="text"
              name="keyword"
              placeholder={`Keyword ${index + 1}`}
              value={field.keyword}
              onChange={(e) => handleFieldChange(index, e)}
              className="keyword-input"
            />
            <input
              type="text" // Usamos text para controlar el valor, pero solo aceptamos números.
              name="searches"
              placeholder="Avg. Monthly Searches"
              value={field.searches}
              onChange={(e) => handleFieldChange(index, e)}
              className="searches-input"
              pattern="[0-9]*" // Atributo para mejorar la experiencia en móviles.
            />
            {/* Solo muestra el botón de eliminar si hay más de una fila */}
            {fields.length > 1 && (
              <button
                type="button"
                className="remove-btn"
                onClick={() => handleRemoveField(index)}
              >
                &times;
              </button>
            )}
          </div>
        ))}
        {/* Botón para agregar una nueva fila */}
        <button type="button" className="add-btn" onClick={handleAddField}>
          + Add Keyword
        </button>
      </div>

      {/* Botón principal para ejecutar el cálculo */}
      <button className="calculate-btn" onClick={handleCalculate}>
        Calculate Niche Score
      </button>

      {/* Muestra un mensaje de error si existe */}
      {error && <p className="error-message">{error}</p>}

      {/* Muestra la sección de resultados si el cálculo fue exitoso */}
      {result && (
        <div className="results">
          <h3>Results</h3>
          <p>
            Total monthly search volume:{' '}
            <strong>{result.totalSearches.toLocaleString()}</strong>
          </p>
          <div className="score-container">
            <p>Niche Score:</p>
            <strong className={`score ${result.score >= 70 ? 'good' : 'bad'}`}>
              {result.score}
            </strong>
          </div>
          <p className="score-info">
            A score above 70 is generally considered a good niche.
          </p>
        </div>
      )}
    </div>
  );
}

export default Calculator;
