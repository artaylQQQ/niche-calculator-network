---
// src/components/Calculator.astro — V012 (runtime fix, secure evaluator)
// - Sin `${...}` dentro del <script>. Todo viaja por data-*
// - Regex segura (sin rangos inválidos)
// - Muestra resultado en cliente, con validación accesible
const { schema } = Astro.props;
const locale = (schema?.locale ?? "en-US");
const inputs = Array.isArray(schema?.inputs) ? schema.inputs : [];
const expression = typeof schema?.expression === "string" ? schema.expression.trim() : "";
const formulaJS = typeof schema?.formula_js === "string" ? schema.formula_js.trim() : "";
const units = schema?.units || { input: "", output: "" };
const disclaimer = schema?.disclaimer || "Educational information, not professional advice.";
---

<section id="calc-root"
  class="calculator not-prose"
  data-locale={locale}
  data-unit-output={units.output || ""}
  data-expression={expression}
  data-formula={formulaJS}>
  <form id="calc-form" class="space-y-4" novalidate>
    <div class="grid gap-3">
      {inputs.map((f) => (
        <div class="flex flex-col" id={`field-${f.name}`}>
          <label for={`inp-${f.name}`} class="font-medium">{f.hint || f.name}</label>
          <input
            id={`inp-${f.name}`}
            name={f.name}
            type={f.type || "number"}
            step={f.step ?? "any"}
            min={typeof f.min !== "undefined" ? f.min : undefined}
            max={typeof f.max !== "undefined" ? f.max : undefined}
            inputmode="decimal"
            class="border rounded px-3 py-2"
            required
          />
          <small id={`err-${f.name}`} class="text-red-600 hidden"></small>
        </div>
      ))}
    </div>

    <button id="btn-calc" type="submit" class="border rounded px-4 py-2">
      Calculate
    </button>

    <div id="result" class="mt-3" aria-live="polite" role="status"></div>
  </form>

  <p class="text-xs opacity-70 mt-4">{disclaimer}</p>
</section>

<style>
.hidden{ display:none }
</style>

<script>
(function(){
  var root = document.getElementById("calc-root");
  var form = document.getElementById("calc-form");
  var resultEl = document.getElementById("result");

  var locale = (root && root.dataset && root.dataset.locale) ? root.dataset.locale : "en-US";
  var unitSuffix = (root && root.dataset && root.dataset.unitOutput) ? root.dataset.unitOutput : "";
  var exprString = (root && root.dataset && root.dataset.expression) ? root.dataset.expression : "";
  var formulaString = (root && root.dataset && root.dataset.formula) ? root.dataset.formula : "";

  var fmt = new Intl.NumberFormat(locale, { maximumFractionDigits: 8 });

  function getValues(){
    var vals = {};
    for (var i=0; i<form.elements.length; i++){
      var el = form.elements[i];
      if (!el.name) continue;
      var v = (el.value || "").trim();
      if (v === "") { vals[el.name] = NaN; continue; }
      var num = Number(v);
      vals[el.name] = Number.isFinite(num) ? num : NaN;
    }
    return vals;
  }

  function clearErrors(){
    for (var i=0; i<form.elements.length; i++){
      var el = form.elements[i];
      if (!el.name) continue;
      var err = document.getElementById("err-" + el.name);
      if (err) { err.textContent=""; err.classList.add("hidden"); }
      var wrap = document.getElementById("field-" + el.name);
      if (wrap) wrap.removeAttribute("aria-invalid");
    }
  }

  function showError(name, msg){
    var err = document.getElementById("err-" + name);
    if (err) { err.textContent = msg; err.classList.remove("hidden"); }
    var wrap = document.getElementById("field-" + name);
    if (wrap) wrap.setAttribute("aria-invalid", "true");
  }

  // Evaluador aritmético simple y saneado
  function evalExpression(raw, scope){
    // Sustituir variables por sus valores
    var names = Object.keys(scope).sort(function(a,b){ return b.length - a.length; });
    var s = raw;
    for (var i=0; i<names.length; i++){
      var k = names[i];
      var re = new RegExp("\\\\b" + k + "\\\\b", "g");
      s = s.replace(re, String(scope[k]));
    }
    // Permitir sólo dígitos, operadores + - * / % ^, paréntesis, punto, espacios y e/E
    if (!/^[0-9+\-*/%^().\sEe]+$/.test(s)) {
      throw new Error("Invalid characters in expression.");
    }
    // Reemplazar ^ por ** (exponente JS)
    s = s.replace(/\^/g, "**");
    // Bloquear identificadores y tokens peligrosos
    if (/([A-Za-z_][A-Za-z0-9_]*|{|}|\[|\]|new|function|=>|;)/.test(s)) {
      throw new Error("Unsafe token detected.");
    }
    // eslint-disable-next-line no-new-func
    var fn = new Function("return (" + s + ");");
    var out = fn();
    if (typeof out !== "number" || !Number.isFinite(out)) throw new Error("Computation failed.");
    return out;
  }

  function compute(vals){
    if (exprString && exprString.trim().length){
      return evalExpression(exprString, vals);
    } else if (formulaString && formulaString.trim().length){
      // Espera: (inputs) => ({ result, steps })
      if (/new |Function|fetch|XMLHttpRequest|window|document|eval/.test(formulaString)) {
        throw new Error("Unsafe formula_js.");
      }
      // eslint-disable-next-line no-eval
      var fn = (0,eval)(formulaString);
      var out = fn(vals);
      if (out && typeof out.result === "number" && Number.isFinite(out.result)) return out.result;
      throw new Error("formula_js did not return a numeric result.");
    } else {
      throw new Error("No expression or formula_js provided.");
    }
  }

  form.addEventListener("submit", function(ev){
    ev.preventDefault();
    clearErrors();
    try{
      var vals = getValues();
      var bad = false;
      for (var k in vals){
        if (!Object.prototype.hasOwnProperty.call(vals,k)) continue;
        var v = vals[k];
        if (!Number.isFinite(v)) { showError(k, "Enter a valid number"); bad = true; }
      }
      if (bad) { resultEl.textContent = ""; return; }
      var res = compute(vals);
      resultEl.textContent = "Result: " + fmt.format(res) + (unitSuffix ? " " + unitSuffix : "");
    }catch(e){
      console.error(e);
      resultEl.textContent = "Unable to compute. Please check your inputs.";
    }
  });
})();
</script>
