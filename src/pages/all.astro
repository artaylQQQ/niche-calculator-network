---
import BaseLayout from "../layouts/BaseLayout.astro";
import AdBanner from "../components/AdBanner.astro";
const modules = import.meta.glob("../pages/calculators/*.mdx", { eager: true });
const items = Object.values(modules)
  .map((m) => ({
    url: m.url,
    title:
      m.frontmatter?.title ||
      m.url.replace('/calculators/', '').replace('.mdx', ''),
    description:
      m.frontmatter?.intro || m.frontmatter?.description || '',
    updated: m.frontmatter?.updated || ''
  }));
---
<BaseLayout title="Search Calculators" description="Find any calculator available on the site.">
  <section class="hero container mx-auto max-w-5xl px-4">
    <h1 style="color: var(--ink)">Search Calculators</h1>
    <p style="color: var(--muted)">Search through every calculator available on the site.</p>
    <div class="mt-4 flex gap-2">
      <input
        id="search-input"
        type="search"
        placeholder="Search calculators"
        class="flex-1 p-2 border rounded-md"
      />
      <select id="sort-select" class="p-2 border rounded-md">
        <option value="alpha">Alphabetical</option>
        <option value="recent">Newest</option>
      </select>
    </div>
  </section>
  <AdBanner />
  <section class="section container mx-auto max-w-5xl px-4" aria-labelledby="list-all">
    <h2 id="list-all" class="sr-only">Calculator search results</h2>
    <!-- Use a responsive Tailwind grid for consistent card sizes across breakpoints -->
    <div
      id="results"
      class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4"
    >
      {items.map((it) => (
        <div
          data-title={it.title.toLowerCase()}
          data-description={it.description.toLowerCase()}
          data-updated={it.updated}
        >
          <a class="card" href={it.url}>
            <h3>{it.title}</h3>
            <p>{it.description}</p>
          </a>
        </div>
      ))}
    </div>
  </section>
  <script is:inline>
    const input = document.getElementById('search-input');
    const sortSelect = document.getElementById('sort-select');
    const container = document.getElementById('results');
    const cards = Array.from(container.children);

    function filter() {
      const q = input.value.trim().toLowerCase();
      cards.forEach((card) => {
        const t = card.dataset.title;
        const d = card.dataset.description;
        const match = !q || t.includes(q) || d.includes(q);
        card.style.display = match ? '' : 'none';
      });
    }

    function sortCards() {
      const order = sortSelect.value;
      const sorted = [...cards].sort((a, b) => {
        if (order === 'recent') {
          return (
            new Date(b.dataset.updated || 0).getTime() -
            new Date(a.dataset.updated || 0).getTime()
          );
        }
        return a.dataset.title.localeCompare(b.dataset.title);
      });
      sorted.forEach((card) => container.appendChild(card));
      filter();
    }

    input.addEventListener('input', filter);
    sortSelect.addEventListener('change', sortCards);
    sortCards();
  </script>
</BaseLayout>
