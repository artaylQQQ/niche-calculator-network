---
// src/pages/calculators/[slug].astro
// Versión estable y simple: genera rutas desde MDX y renderiza el contenido
// respetando el layout propio de cada MDX (si existe).

type MdxModule = {
  frontmatter?: Record<string, any>;
  default: any; // AstroComponentFactory
};

// 1) Cargamos todos los MDX de /src/content/calculators
//    (EAGER = true para tener el frontmatter en build time).
const mdxModules = import.meta.glob('../../content/calculators/*.mdx', {
  eager: true
}) as Record<string, MdxModule>;

// 2) Utilidad para obtener el slug desde el nombre del archivo
function fileSlug(filePath: string): string {
  const last = filePath.split('/').pop() || '';
  return last.replace(/\.mdx$/i, '');
}

// 3) Construimos un mapa { slug -> módulo } con deduplicación
const bySlug = new Map<string, MdxModule>();
for (const [path, mod] of Object.entries(mdxModules)) {
  const fmSlug = (mod.frontmatter?.slug ?? '').toString().trim();
  const computed = fmSlug || fileSlug(path);
  if (!computed) continue;

  // Evita duplicados: el primer hallado gana
  if (!bySlug.has(computed)) {
    bySlug.set(computed, mod);
  }
}

// 4) Exportamos las rutas estáticas — SIEMPRE un array
export function getStaticPaths() {
  return Array.from(bySlug.keys()).map((slug) => ({
    params: { slug }
  }));
}

// 5) Página: resuelve el slug solicitado
const slug = Astro.params.slug!;
const mod = bySlug.get(slug);

// Si no existe, redirigimos al 404 (no rompe el build)
if (!mod) {
  return Astro.redirect('/404');
}

// Renderizamos el MDX. Si el MDX tiene `layout:` en el frontmatter,
// Astro respetará ese layout (por eso NO envolvemos con un layout aquí).
const { default: Content } = mod;
---

<Content />
