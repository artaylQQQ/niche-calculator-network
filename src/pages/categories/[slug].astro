---
import BaseLayout from '../../layouts/BaseLayout.astro';
import AdBanner from '../../components/AdBanner.astro';
import fs from 'node:fs';
import path from 'node:path';
import { fileURLToPath } from 'node:url';

/** Genera rutas y datos sin variables globales */
export async function getStaticPaths() {
  // 1) Define the twelve supported category slugs and a list of aliases.  The
  // generator and pages normalise arbitrary cluster names using these
  // mappings.  Any calculator whose cluster matches (case insensitive)
  // one of the listed aliases will be grouped into the corresponding
  // category page.
  const CATEGORIES = [
    { slug: 'finance-business',        title: 'Finance & Business',        map: ['finance & business','finance','business','business & commerce','taxes','percentages & ratios'] },
    { slug: 'personal-finance-loans',  title: 'Personal Finance & Loans',  map: ['personal finance & loans','personal finance','loans','loan','mortgage'] },
    { slug: 'health-fitness',          title: 'Health & Fitness',          map: ['health & fitness','health','fitness','bmi'] },
    { slug: 'math-statistics',         title: 'Math & Statistics',         map: ['math & statistics','math','geometry','algebra','statistics','averages and probabilities','areas & volumes'] },
    { slug: 'conversions-units',       title: 'Conversions & Units',       map: ['conversions & units','conversions','unit conversions','unit and currency conversions'] },
    { slug: 'date-time',               title: 'Date & Time',               map: ['date & time','time & date','time-date','durations and schedules'] },
    { slug: 'education-learning',      title: 'Education & Learning',      map: ['education & learning','education','learning','study'] },
    { slug: 'science-engineering',     title: 'Science & Engineering',     map: ['science & engineering','science','engineering','physics'] },
    { slug: 'technology-coding',       title: 'Technology & Coding',       map: ['technology & coding','technology','tech','computing','coding','technology & computing'] },
    { slug: 'home-diy',                title: 'Home & DIY',                map: ['home & diy','home and diy','diy','household'] },
    { slug: 'lifestyle-travel',        title: 'Lifestyle & Travel',        map: ['lifestyle & travel','lifestyle','travel','everyday','misc','miscellaneous','other','general'] },
    { slug: 'web-marketing',           title: 'Web & Marketing',           map: ['web & marketing','web','marketing','seo'] },
  ];

  // 2) Lee calculators.json en build
  const __filename = fileURLToPath(import.meta.url);
  const __dirname  = path.dirname(__filename);
  const dataPath   = path.resolve(__dirname, '../../../data/calculators.json');

  let calcs = [];
  try {
    calcs = JSON.parse(fs.readFileSync(dataPath, 'utf-8'));
  } catch (e) {
    console.warn('Could not read calculators.json at build time:', e?.message);
    calcs = [];
  }

  // Carga frontmatter de cada calculadora para completar datos faltantes
  const mdxModules = import.meta.glob('../../pages/calculators/*.mdx', { eager: true });
  const fmIndex = Object.fromEntries(
    Object.values(mdxModules).map((m) => {
      const url = m.url || '';
      const slug = url.split('/').pop()?.replace('.mdx', '') ?? '';
      return [slug, m.frontmatter || {}];
    })
  );

  // 3) Para cada categoría, calcula su lista y la pasa en props
  return CATEGORIES.map((cat) => {
    const list = Array.isArray(calcs)
      ? calcs
          .filter(
            (it) =>
              (it?.cluster ?? '') &&
              cat.map.some((v) => (it.cluster || '').toLowerCase().includes(v.toLowerCase()))
          )
          .slice(0, 200)
          .map((it) => {
            const fm = fmIndex[it.slug] || {};
            return {
              ...it,
              title: it.title || fm.title || it.slug,
              intro: it.intro || fm.intro || fm.description,
              description: it.description || fm.description,
            };
          })
          .sort((a, b) => a.title.localeCompare(b.title))
      : [];

    return {
      params: { slug: cat.slug },
      props: { cat, list },
    };
  });
}

// Recibe cat y list ya preparados desde getStaticPaths
const { cat, list = [] } = Astro.props;
---

<BaseLayout title={`${cat.title} calculators`} description={`Browse ${cat.title} calculators`}>
  <section class="hero container mx-auto max-w-5xl px-4 pt-10">
    <h1 style="text-transform:capitalize;color: var(--ink)">{cat.title} Calculators</h1>
    <p style="color: var(--muted)">Explore calculators in this category.</p>
  </section>

  <AdBanner />

  {list.length === 0 ? (
    <p class="section container mx-auto max-w-5xl px-4">No calculators yet in this category.</p>
  ) : (
    <section class="section container mx-auto max-w-5xl px-4 py-8" aria-labelledby="cat-list">
      <h2 id="cat-list" class="sr-only">Calculators list</h2>
      <!-- Use a div container instead of ul/li to avoid any list markers or pseudo‑elements causing bracket artifacts -->
      <div class="cards-grid">
        {list.map((c) => (
          <div>
            <a class="card" href={`/calculators/${c.slug}/`}>
              <h3>{c.title}</h3>
              <p>{c.intro || c.description || ''}</p>
            </a>
          </div>
        ))}
      </div>
    </section>
  )}
</BaseLayout>
