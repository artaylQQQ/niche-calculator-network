---
import BaseLayout from '../../layouts/BaseLayout.astro';
import AdBanner from '../../components/AdBanner.astro';
import fs from 'node:fs';
import path from 'node:path';
import { fileURLToPath } from 'node:url';

/** Genera rutas y datos sin variables globales */
export async function getStaticPaths() {
  // 1) Define the eight supported category slugs and a list of aliases.  The
  // generator and pages normalise arbitrary cluster names using these
  // mappings.  Any calculator whose cluster matches (case insensitive)
  // one of the listed aliases will be grouped into the corresponding
  // category page.
  const CATEGORIES = [
    { slug: 'finance',     title: 'Finance',          map: ['finance','finance & loans','taxes','business','business & commerce','percentages & ratios'] },
    { slug: 'health',      title: 'Health',           map: ['health','health & fitness','bmi'] },
    { slug: 'conversions', title: 'Conversions',      map: ['conversions','unit conversions','unit and currency conversions'] },
    { slug: 'math',        title: 'Math',             map: ['math','geometry','geometry & math','areas & volumes','algebra','percentages & ratios','statistics','averages and probabilities'] },
    { slug: 'technology',  title: 'Technology',       map: ['technology','tech','computing','technology & computing'] },
    { slug: 'date-time',   title: 'Date & Time',      map: ['date & time','time & date','time-date','durations and schedules'] },
    { slug: 'home-diy',    title: 'Home & DIY',       map: ['home & diy','home and diy','diy','household'] },
    { slug: 'other',       title: 'Everyday & Misc',  map: ['other','misc','miscellaneous','everyday','everyday & misc','general'] }
  ];

  // 2) Lee calculators.json en build
  const __filename = fileURLToPath(import.meta.url);
  const __dirname  = path.dirname(__filename);
  const dataPath   = path.resolve(__dirname, '../../../data/calculators.json');

  let calcs = [];
  try {
    calcs = JSON.parse(fs.readFileSync(dataPath, 'utf-8'));
  } catch (e) {
    console.warn('Could not read calculators.json at build time:', e?.message);
    calcs = [];
  }

  // 3) Para cada categoría, calcula su lista y la pasa en props
  return CATEGORIES.map((cat) => {
    const list = Array.isArray(calcs)
      ? calcs.filter((it) =>
          (it?.cluster ?? '') &&
          cat.map.some((v) => (it.cluster || '').toLowerCase().includes(v.toLowerCase()))
        ).slice(0, 200)
      : [];

    return {
      params: { slug: cat.slug },
      props:  { cat, list }
    };
  });
}

// Recibe cat y list ya preparados desde getStaticPaths
const { cat, list = [] } = Astro.props;
---

<BaseLayout title={`${cat.title} calculators`} description={`Browse ${cat.title} calculators`}>
  <section class="hero container mx-auto max-w-5xl px-4 pt-10">
    <h1 style="text-transform:capitalize;color: #000">{cat.title} Calculators</h1>
    <p style="color: var(--muted)">Explore calculators in this category.</p>
  </section>

  <AdBanner />

  {list.length === 0 ? (
    <p class="section container mx-auto max-w-5xl px-4">No calculators yet in this category.</p>
  ) : (
    <section class="section container mx-auto max-w-5xl px-4 py-8" aria-labelledby="cat-list">
      <h2 id="cat-list" class="sr-only">Calculators list</h2>
      <!-- Use a div container instead of ul/li to avoid any list markers or pseudo‑elements causing bracket artifacts -->
      <div class="cards-grid">
        {list.map((c) => (
          <div>
            <a class="card" href={`/calculators/${c.slug}/`}>
              <h3>{c.title}</h3>
              <p>{c.intro ?? ''}</p>
            </a>
          </div>
        ))}
      </div>
    </section>
  )}
</BaseLayout>
